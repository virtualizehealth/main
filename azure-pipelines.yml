trigger: none  # No CI trigger

schedules:
  - cron: "0 14 * * 1"  # Every Monday at 10 AM ET
    displayName: Weekly Sync
    branches:
      include:
        - main
    always: true

variables:
  containerUrl: 'https://vhdcomstor01.blob.core.windows.net/commons-prod'
  syncFolderName: 'ADLS_BackUp_Files'
  backupPrefix: 'backup'

jobs:
- job: sync_and_backup
  displayName: 'Sync Azure Blob and Backup to GitHub'
  pool:
    vmImage: 'windows-latest'

  steps:
    - checkout: self
      persistCredentials: true
      fetchDepth: 0

    - task: PowerShell@2
      displayName: 'Install AzCopy to Temp Directory'
      inputs:
        targetType: 'inline'
        script: |
          # Define a path in the agent's temp directory to isolate build tools
          $azcopyPath = Join-Path -Path "$(Agent.TempDirectory)" -ChildPath "azcopy"
          New-Item -ItemType Directory -Path $azcopyPath -Force

          # Download and expand AzCopy outside of the source code directory
          $zipFile = Join-Path $azcopyPath "azcopy.zip"
          Invoke-WebRequest -Uri https://aka.ms/downloadazcopy-v10-windows -OutFile $zipFile
          Expand-Archive $zipFile -DestinationPath $azcopyPath -Force

          # Find and set the path to the executable
          $azcopyExe = Get-ChildItem -Path $azcopyPath -Recurse -Filter "azcopy.exe" | Select-Object -First 1
          Write-Host "AzCopy located at $($azcopyExe.FullName)"
          echo "##vso[task.setvariable variable=AZCOPY_EXE]$($azcopyExe.FullName)"

    - task: AzureCLI@2
      displayName: 'Sync Blobs (with deletes) into Repo Subfolder'
      inputs:
        azureSubscription: 'Virtualize Health(726fbb03-a12a-4620-b068-0c0fe0629c1b)'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $ErrorActionPreference = "Stop"

          $safeSyncFolderPath = Join-Path -Path "$(Build.SourcesDirectory)" -ChildPath "$(syncFolderName)"
          Write-Host "Syncing to path: $safeSyncFolderPath"

          New-Item -ItemType Directory -Path $safeSyncFolderPath -Force

          # Use the AzCopy executable from the temp directory
          & "$(AZCOPY_EXE)" sync "$(containerUrl)" $safeSyncFolderPath --recursive --delete-destination=true

    - task: PowerShell@2
      displayName: 'Always Commit and Push to Main'
      inputs:
        targetType: 'inline'
        script: |
          $ErrorActionPreference = "Stop"

          git config --global user.email "gabriel@virtualizehealth.com"
          git config --global user.name "virtualizehealth"

          Set-Location "$(Build.SourcesDirectory)"
          if (-not (Test-Path ".git")) {
            Write-Error ".git folder not found."
          }

          Write-Host "Switching to the main branch..."
          git checkout main
          git pull origin main

          # Define source and destination paths
          $syncDir = Join-Path -Path "$(Build.SourcesDirectory)" -ChildPath "$(syncFolderName)"
          $copySource = Join-Path -Path $syncDir -ChildPath "*"
          
          # Copy synced items from the subfolder to the repository root
          Write-Host "Copying items from $syncDir to $(Build.SourcesDirectory)"
          Copy-Item -Path $copySource -Destination "$(Build.SourcesDirectory)" -Recurse -Force

          # *** FIX: Remove the temporary sync folder before adding files to Git ***
          Write-Host "Removing temporary sync folder: $syncDir"
          Remove-Item -Path $syncDir -Recurse -Force

          # Stage all changes in the repository
          # AzCopy files are in $(Agent.TempDirectory) and will be ignored.
          # The synced-files folder has been removed.
          git add -A

          # Use git diff-index to see if there are changes to commit
          if (-not (git diff-index --quiet HEAD --)) {
            Write-Host "Changes detected. Committing..."
            git commit -m "Weekly sync from Azure Blob - $env:BUILD_BUILDID"
          } else {
            Write-Host "No changes detected. Nothing to commit."
          }

          Write-Host "Pushing changes to origin/main..."
          git push origin main

    - task: PowerShell@2
      displayName: 'Create Backup Snapshot Branch and Prune Old Backups'
      inputs:
        targetType: 'inline'
        script: |
          $ErrorActionPreference = "Stop"
          cd "$(Build.SourcesDirectory)"

          $oldBranch = "main"
          $dtNow = Get-Date -UFormat "%Y-%m-%d"
          $branchPrefix = "$(backupPrefix)/$dtNow"
          $repoList = git branch -r
          $suffix = [int][char]"A"

          $repoList.Split("`n") | ForEach-Object {
            $line = $_.Trim()
            if ($line.StartsWith("origin/" + $branchPrefix)) {
              $testSuffix = [int][char]($line.Substring($branchPrefix.Length + 7))
              if ($testSuffix -ge $suffix) { $suffix = $testSuffix + 1 }
            }
          }

          $newBranch = "$branchPrefix" + [char]$suffix
          git checkout -b $newBranch
          git push -u origin $newBranch

          # Optional: Logic to delete only one old branch per run can be added here
          # For now, this deletes all other backup branches.
          $repoList.Split("`n") | Where-Object { <span class="math-inline">\_\.Trim\(\)\.StartsWith\("origin/</span>(backupPrefix)/") } | ForEach-Object {
            $branchToDelete =