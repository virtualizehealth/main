trigger: none  # No CI trigger

schedules:
  - cron: "0 14 * * 1"  # Every Monday at 10 AM ET
    displayName: Weekly Sync
    branches:
      include:
        - main
    always: true

variables:
  containerUrl: 'https://vhdcomstor01.blob.core.windows.net/commons-prod'
  repoFolder: '$(Build.SourcesDirectory)'
  backupPrefix: 'backup'

jobs:
- job: sync_and_backup
  displayName: Sync Azure Blob and Backup GitHub
  pool:
    vmImage: 'windows-latest'
  steps:
    - checkout: self
      persistCredentials: true

    - task: AzureCLI@2
      displayName: 'Copy Blobs into Repo'
      inputs:
        azureSubscription: 'Virtualize Health(726fbb03-a12a-4620-b068-0c0fe0629c1b)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          azcopy copy "$(containerUrl)/*" "$(repoFolder)/" --recursive

    - task: PowerShell@2
      displayName: 'Commit to Main if Changed'
      inputs:
        targetType: 'inline'
        script: |
          git config --global user.email "gabriel@virtualizehealth.com"
          git config --global user.name "virtualizehealth"

          Set-Location "$(repoFolder)"

          # Check if 'main' branch exists
          $branchExists = git branch --list main
          if (-not $branchExists) {
            git checkout -b main
          } else {
            git checkout main
          }

          git add .

          # Check for staged changes
          $hasChanges = git diff --cached --quiet
          if ($LASTEXITCODE -eq 0) {
            Write-Host "No changes to commit."
          } else {
            git commit -m "Weekly sync from Azure Blob - $env:BUILD_BUILDID"
            git push origin main
          }

    - task: PowerShell@2
      displayName: 'Create Backup Snapshot Branch'
      inputs:
        targetType: 'inline'
        script: |
          $ErrorActionPreference = "Stop"
          cd "$(repoFolder)"

          $oldBranch = "main"
          $dtNow = Get-Date -UFormat "%Y-%m-%d"
          $branchPrefix = "$(backupPrefix)/$dtNow"
          $repoList = git branch -r
          $suffix = [int][char]"A"

          $repoList.Split("`n") | ForEach-Object {
            $line = $_.Trim()
            if ($line.StartsWith("origin/" + $branchPrefix)) {
              $testSuffix = [int][char]($line.Substring($branchPrefix.Length + 7))
              if ($testSuffix -ge $suffix) { $suffix = $testSuffix + 1 }
            }
          }

          $newBranch = "$branchPrefix" + [char]$suffix
          git checkout -b $newBranch
          git push -u origin $newBranch

          # Optional cleanup of older branches starting with the same prefix
          $repoList.Split("`n") | Where-Object { $_.Trim().StartsWith("origin/$(backupPrefix)/") } | ForEach-Object {
            $branchToDelete = $_.Trim().Substring(7)
            if ($branchToDelete -ne $newBranch) {
              Write-Host "Deleting old branch: $branchToDelete"
              git push origin --delete $branchToDelete
            }
          }

          git checkout $oldBranch