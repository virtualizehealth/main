trigger: none  # No CI trigger

schedules:
  - cron: "0 14 * * 1"  # Every Monday at 10 AM ET
    displayName: Weekly Sync
    branches:
      include:
        - main
    always: true

variables:
  # The container URL remains the same.
  containerUrl: 'https://vhdcomstor01.blob.core.windows.net/commons-prod'
  # We will no longer use the syncFolder variable directly to build paths.
  # We define the folder name here and construct the full path within the scripts.
  syncFolderName: 'synced-files'
  backupPrefix: 'backup'

jobs:
- job: sync_and_backup
  displayName: 'Sync Azure Blob and Backup to GitHub'
  pool:
    vmImage: 'windows-latest'

  steps:
    - checkout: self
      persistCredentials: true

    - task: PowerShell@2
      displayName: 'Install AzCopy'
      inputs:
        targetType: 'inline'
        script: |
          # This task remains the same.
          Invoke-WebRequest -Uri https://aka.ms/downloadazcopy-v10-windows -OutFile azcopy.zip
          Expand-Archive azcopy.zip -DestinationPath . -Force
          $azCopyPath = Get-ChildItem -Recurse -Filter "azcopy.exe" | Select-Object -First 1
          echo "##vso[task.setvariable variable=AZCOPY_EXE]$($azCopyPath.FullName)"

    - task: AzureCLI@2
      displayName: 'Sync Blobs (with deletes) into Repo Subfolder'
      inputs:
        azureSubscription: 'Virtualize Health(726fbb03-a12a-4620-b068-0c0fe0629c1b)'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $ErrorActionPreference = "Stop"

          # FIX: Use Join-Path to create a robust, OS-native path.
          # This avoids the "inconsistent path separators" panic from AzCopy.
          $safeSyncFolderPath = Join-Path -Path "$(Build.SourcesDirectory)" -ChildPath "$(syncFolderName)"
          Write-Host "Syncing to path: $safeSyncFolderPath"

          # Ensure the directory exists using the safe path
          New-Item -ItemType Directory -Path $safeSyncFolderPath -Force

          # Use the safe path when calling AzCopy
          & "$(AZCOPY_EXE)" sync "$(containerUrl)" $safeSyncFolderPath --recursive --delete-destination=true

    - task: PowerShell@2
      displayName: 'Always Commit and Push to Main'
      inputs:
        targetType: 'inline'
        script: |
          git config --global user.email "gabriel@virtualizehealth.com"
          git config --global user.name "virtualizehealth"

          Set-Location "$(Build.SourcesDirectory)"
          if (-not (Test-Path ".git")) {
            Write-Error ".git folder not found. Make sure you're in a Git repo."
            exit 1
          }

          # FIX: Handle detached HEAD by creating a local 'main' branch
          # that tracks the remote 'origin/main'. This is the key change.
          Write-Host "Ensuring we are on the main branch..."
          git checkout -B main origin/main

          # Now that we are on the correct branch, copy the synced files
          $safeSyncFolderPath = Join-Path -Path "$(Build.SourcesDirectory)" -ChildPath "$(syncFolderName)"
          $copySourcePath = Join-Path -Path $safeSyncFolderPath -ChildPath "*"
          
          Write-Host "Copying items from $safeSyncFolderPath to $(Build.SourcesDirectory)"
          Copy-Item -Path $copySourcePath -Destination "$(Build.SourcesDirectory)" -Recurse -Force

          git add -A
          git commit -m "Weekly sync from Azure Blob - $env:BUILD_BUILDID" --allow-empty
          
          Write-Host "Pushing changes to origin/main..."
          git push origin main
    - task: PowerShell@2
      displayName: 'Create Backup Snapshot Branch and Prune Old Backups'
      inputs:
        targetType: 'inline'
        script: |
          # This task does not deal with file paths and needs no changes for the separator issue.
          # It has been left as is.
          $ErrorActionPreference = "Stop"
          cd "$(Build.SourcesDirectory)"

          $oldBranch = "main"
          $dtNow = Get-Date -UFormat "%Y-%m-%d"
          $branchPrefix = "$(backupPrefix)/$dtNow"
          $repoList = git branch -r
          $suffix = [int][char]"A"

          $repoList.Split("`n") | ForEach-Object {
            $line = $_.Trim()
            if ($line.StartsWith("origin/" + $branchPrefix)) {
              $testSuffix = [int][char]($line.Substring($branchPrefix.Length + 7))
              if ($testSuffix -ge $suffix) { $suffix = $testSuffix + 1 }
            }
          }

          $newBranch = "$branchPrefix" + [char]$suffix
          git checkout -b $newBranch
          git push -u origin $newBranch

          # Optional: Logic to delete only one old branch per run can be added here
          # For now, this deletes all other backup branches.
          $repoList.Split("`n") | Where-Object { $_.Trim().StartsWith("origin/$(backupPrefix)/") } | ForEach-Object {
            $branchToDelete = $_.Trim().Substring(7)
            if ($branchToDelete -ne $newBranch) {
              Write-Host "Deleting old branch: $branchToDelete"
              git push origin --delete $branchToDelete
            }
          }

          git checkout $oldBranch